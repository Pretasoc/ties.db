package com.tiesdb.schema.impl.contracts;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

import com.tiesdb.web3j.SequentialFastRawTransactionManager;

import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class TiesDB extends Contract {
    private static final String BINARY = "0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612cc4806100536000396000f300606060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063055965cf1461018557806306f0cfa61461023f5780630f08a5a2146102665780631712092b146102c357806317e4735114610370578063197eadb7146103b357806322a5b0bc1461040c5780632aaca1eb1461046557806335e714d11461051f578063398fa5c8146105975780633d4f20a9146105d0578063473e13ad146106395780635843eaad146106725780635c6dc219146106ee57806382e49b1e1461072757806388d72829146107845780638da5cb5b14610800578063984c7ec814610855578063a5163f73146108e1578063a91ee0dc14610920578063a92ddcf814610959578063dc5a8b29146109a5578063e24ec80814610a0f578063e29581aa14610a95578063ed90cb3714610aff578063ee509cf514610b33578063ef0fb97a14610b78578063f274d82314610c01578063f2fde38b14610ca1578063f96d487b14610cda575b600080fd5b341561019057600080fd5b6101c46004808035600019169060200190919080356000191690602001909190803560001916906020019091905050610d75565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102045780820151818401526020810190506101e9565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024a57600080fd5b610264600480803560001916906020019091905050610de3565b005b341561027157600080fd5b6102a56004808035600019169060200190919080356000191690602001909190803560001916906020019091905050610e77565b60405180826000191660001916815260200191505060405180910390f35b34156102ce57600080fd5b6102f560048080356000191690602001909190803560001916906020019091905050610f48565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b610395600480803560001916906020019091905050610f99565b60405180826000191660001916815260200191505060405180910390f35b34156103be57600080fd5b6103f26004808035600019169060200190919080356000191690602001909190803560001916906020019091905050610fc1565b604051808215151515815260200191505060405180910390f35b341561041757600080fd5b61044b60048080356000191690602001909190803560001916906020019091908035600019169060200190919050506110a4565b604051808215151515815260200191505060405180910390f35b341561047057600080fd5b6104a46004808035600019169060200190919080356000191690602001909190803560001916906020019091905050611187565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561052a57600080fd5b61057960048080356000191690602001909190803560001916906020019091908035906020019082018035906020019190919290803590602001908201803590602001919091929050506111f5565b60405180826000191660001916815260200191505060405180910390f35b34156105a257600080fd5b6105ce600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061130f565b005b34156105db57600080fd5b61061b6004808035906020019082018035906020019190919290803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611453565b60405180826000191660001916815260200191505060405180910390f35b341561064457600080fd5b610670600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611545565b005b341561067d57600080fd5b61069760048080356000191690602001909190505061169a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106da5780820151818401526020810190506106bf565b505050509050019250505060405180910390f35b34156106f957600080fd5b610725600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116ce565b005b341561073257600080fd5b61076660048080356000191690602001909190803560001916906020019091908035600019169060200190919050506117e2565b60405180826000191660001916815260200191505060405180910390f35b341561078f57600080fd5b6107a96004808035600019169060200190919050506118b3565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107ec5780820151818401526020810190506107d1565b505050509050019250505060405180910390f35b341561080b57600080fd5b61081361195e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561086057600080fd5b6108c360048080356000191690602001909190803560001916906020019091908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190820180359060200191909192905050611983565b60405180826000191660001916815260200191505060405180910390f35b34156108ec57600080fd5b610906600480803560001916906020019091905050611ac1565b604051808215151515815260200191505060405180910390f35b341561092b57600080fd5b610957600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b6b565b005b341561096457600080fd5b61098b60048080356000191690602001909190803560001916906020019091905050611c0a565b604051808215151515815260200191505060405180910390f35b34156109b057600080fd5b6109b8611cd0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109fb5780820151818401526020810190506109e0565b505050509050019250505060405180910390f35b3415610a1a57600080fd5b610a7760048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611ce7565b60405180826000191660001916815260200191505060405180910390f35b3415610aa057600080fd5b610aa8611e33565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610aeb578082015181840152602081019050610ad0565b505050509050019250505060405180910390f35b3415610b0a57600080fd5b610b3160048080356000191690602001909190803560001916906020019091905050611eca565b005b3415610b3e57600080fd5b610b7660048080356000191690602001909190803563ffffffff1690602001909190803563ffffffff16906020019091905050611f9c565b005b3415610b8357600080fd5b610baa6004808035600019169060200190919080356000191690602001909190505061205a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bed578082015181840152602081019050610bd2565b505050509050019250505060405180910390f35b3415610c0c57600080fd5b610c266004808035600019169060200190919050506120ab565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c66578082015181840152602081019050610c4b565b50505050905090810190601f168015610c935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610cac57600080fd5b610cd8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506120df565b005b3415610ce557600080fd5b610d1e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560001916906020019091905050612234565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d61578082015181840152602081019050610d46565b505050509050019250505060405180910390f35b610d7d612c34565b610dda6001800160008660001916600019168152602001908152602001600020600401600085600019166000191681526020019081526020016000206008016000846000191660001916815260200190815260200160002061229e565b90509392505050565b600173ad877d955f97616d100b7bcb6174ae28d64a627d63568c028e9091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b1515610e6057600080fd5b6102c65a03f41515610e7157600080fd5b50505050565b600060018001600085600019166000191681526020019081526020016000206004016000846000191660001916815260200190815260200160002073c9915f9b0cc3ad5dc84b601ee89ebbfeb2fced8d630b3bf41f9091846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b1515610f2d57600080fd5b6102c65a03f41515610f3e57600080fd5b5050509392505050565b610f50612c34565b610f9160018001600085600019166000191681526020019081526020016000206004016000846000191660001916815260200190815260200160002061235f565b905092915050565b6000600160020160008360001916600019168152602001908152602001600020549050919050565b600060018001600085600019166000191681526020019081526020016000206004016000846000191660001916815260200190815260200160002073c9915f9b0cc3ad5dc84b601ee89ebbfeb2fced8d63eebfbc859091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b151561108057600080fd5b6102c65a03f4151561109157600080fd5b5050506040518051905090509392505050565b600060018001600085600019166000191681526020019081526020016000206004016000846000191660001916815260200190815260200160002073c9915f9b0cc3ad5dc84b601ee89ebbfeb2fced8d6317d77ab79091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b151561116357600080fd5b6102c65a03f4151561117457600080fd5b5050506040518051905090509392505050565b61118f612c34565b6111ec600180016000866000191660001916815260200190815260200160002060040160008560001916600019168152602001908152602001600020600a0160008460001916600019168152602001908152602001600020612420565b90509392505050565b600060018001600088600019166000191681526020019081526020016000206004016000876000191660001916815260200190815260200160002073c9915f9b0cc3ad5dc84b601ee89ebbfeb2fced8d630a75301d9091878787876000604051602001526040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018060200180602001838103835287878281815260200192508082843782019150508381038252858582818152602001925080828437820191505097505050505050505060206040518083038186803b15156112e857600080fd5b6102c65a03f415156112f957600080fd5b5050506040518051905090509695505050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561136d57600080fd5b600160040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506113ba816124e1565b1515156113c657600080fd5b80739eee697411acd210a34d9f982448bb37398314d663ed16c83e909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b151561143b57600080fd5b6102c65a03f4151561144c57600080fd5b5050505050565b6000600173ad877d955f97616d100b7bcb6174ae28d64a627d63d0d7955690918686866000604051602001526040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285858281815260200192508082843782019150509550505050505060206040518083038186803b151561152157600080fd5b6102c65a03f4151561153257600080fd5b5050506040518051905090509392505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115a357600080fd5b600160040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506115f0816124e1565b1515156115fc57600080fd5b80739eee697411acd210a34d9f982448bb37398314d663e1df99e0909160016000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b151561167a57600080fd5b6102c65a03f4151561168b57600080fd5b50505060405180519050505050565b6116a2612c48565b6116c7600180016000846000191660001916815260200190815260200160002061251f565b9050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172a57600080fd5b600173ad877d955f97616d100b7bcb6174ae28d64a627d633514a1729091836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15156117cb57600080fd5b6102c65a03f415156117dc57600080fd5b50505050565b600060018001600085600019166000191681526020019081526020016000206004016000846000191660001916815260200190815260200160002073c9915f9b0cc3ad5dc84b601ee89ebbfeb2fced8d6388fb34d59091846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b151561189857600080fd5b6102c65a03f415156118a957600080fd5b5050509392505050565b6118bb612c5c565b6118cf82600161263690919063ffffffff16565b600c0180548060200260200160405190810160405280929190818152602001828054801561195257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611908575b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001800160008a600019166000191681526020019081526020016000206004016000896000191660001916815260200190815260200160002073c9915f9b0cc3ad5dc84b601ee89ebbfeb2fced8d63bdbad5ee90918989898989896000604051602001526040518863ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018088815260200180602001806020018060200184810384528a8a82818152602001925080828437820191505084810383528888828181526020019250808284378201915050848103825286868281815260200192508082843782019150509a505050505050505050505060206040518083038186803b1515611a9857600080fd5b6102c65a03f41515611aa957600080fd5b50505060405180519050905098975050505050505050565b6000600173ad877d955f97616d100b7bcb6174ae28d64a627d6399dd19d69091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b1515611b4957600080fd5b6102c65a03f41515611b5a57600080fd5b505050604051805190509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bc657600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600180016000846000191660001916815260200190815260200160002073f20e72e55b875b0b4886bde1191060b860aa824363f29f17079091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b1515611cad57600080fd5b6102c65a03f41515611cbe57600080fd5b50505060405180519050905092915050565b611cd8612c48565b611ce260016126bb565b905090565b600080600180016000856000191660001916815260200190815260200160002073f20e72e55b875b0b4886bde1191060b860aa82436341a080749091856000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d9e578082015181840152602081019050611d83565b50505050905090810190601f168015611dcb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1515611de857600080fd5b6102c65a03f41515611df957600080fd5b5050506040518051905090508360016002016000836000191660001916815260200190815260200160002081600019169055505092915050565b611e3b612c5c565b6001600301805480602002602001604051908101604052809291908181526020018280548015611ec057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611e76575b5050505050905090565b600180016000836000191660001916815260200190815260200160002073f20e72e55b875b0b4886bde1191060b860aa8243638042a8509091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b1515611f6257600080fd5b6102c65a03f41515611f7357600080fd5b505050600160020160008260001916600019168152602001908152602001600020600090555050565b600173ad877d955f97616d100b7bcb6174ae28d64a627d63c193f7df90918585856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184600019166000191681526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff16815260200194505050505060006040518083038186803b151561204157600080fd5b6102c65a03f4151561205257600080fd5b505050505050565b612062612c48565b6120a3600180016000856000191660001916815260200190815260200160002060040160008460001916600019168152602001908152602001600020612721565b905092915050565b6120b3612c34565b6120d8600180016000846000191660001916815260200190815260200160002061279c565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561213a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561217657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61223c612c70565b6000600160040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061229583826128f990919063ffffffff16565b91505092915050565b6122a6612c34565b6122af82612a10565b1515156122bb57600080fd5b81600e018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123535780601f1061232857610100808354040283529160200191612353565b820191906000526020600020905b81548152906001019060200180831161233657829003601f168201915b50505050509050919050565b612367612c34565b61237082612abe565b15151561237c57600080fd5b816006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124145780601f106123e957610100808354040283529160200191612414565b820191906000526020600020905b8154815290600101906020018083116123f757829003601f168201915b50505050509050919050565b612428612c34565b61243182612b6c565b15151561243d57600080fd5b81600e018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124d55780601f106124aa576101008083540402835291602001916124d5565b820191906000526020600020905b8154815290600101906020018083116124b857829003601f168201915b50505050509050919050565b6000808260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16149050919050565b612527612c48565b6125cc826002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125c25780601f10612597576101008083540402835291602001916125c2565b820191906000526020600020905b8154815290600101906020018083116125a557829003601f168201915b5050505050612c1a565b1515156125d857600080fd5b8160030180548060200260200160405190810160405280929190818152602001828054801561262a57602002820191906000526020600020905b81546000191681526020019060010190808311612612575b50505050509050919050565b600080600080856002016000866000191660001916815260200190815260200160002054925085600101600084600019166000191681526020019081526020016000209150816004016000866000191660001916815260200190815260200160002090506126a381612abe565b1515156126af57600080fd5b80935050505092915050565b6126c3612c48565b8160000180548060200260200160405190810160405280929190818152602001828054801561271557602002820191906000526020600020905b815460001916815260200190600101908083116126fd575b50505050509050919050565b612729612c48565b61273282612abe565b15151561273e57600080fd5b8160070180548060200260200160405190810160405280929190818152602001828054801561279057602002820191906000526020600020905b81546000191681526020019060010190808311612778575b50505050509050919050565b6127a4612c34565b612849826002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561283f5780601f106128145761010080835404028352916020019161283f565b820191906000526020600020905b81548152906001019060200180831161282257829003601f168201915b5050505050612c1a565b15151561285557600080fd5b816002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128ed5780601f106128c2576101008083540402835291602001916128ed565b820191906000526020600020905b8154815290600101906020018083116128d057829003601f168201915b50505050509050919050565b612901612c70565b600061290b612c70565b6000808660010160008760001916600019168152602001908152602001600020600101935083805490506040518059106129425750595b90808252806020026020018201604052509250600091505b8251821015612a0357838281548110151561297157fe5b906000526020600020900190508060000160049054906101000a900463ffffffff1663ffffffff1660208260000160009054906101000a900463ffffffff1663ffffffff1667ffffffffffffffff169060020a021783838151811015156129d457fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff168152505081600101915061295a565b8294505050505092915050565b6000612ab782600e018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612aad5780601f10612a8257610100808354040283529160200191612aad565b820191906000526020600020905b815481529060010190602001808311612a9057829003601f168201915b5050505050612c1a565b9050919050565b6000612b65826006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b5b5780601f10612b3057610100808354040283529160200191612b5b565b820191906000526020600020905b815481529060010190602001808311612b3e57829003601f168201915b5050505050612c1a565b9050919050565b6000612c1382600e018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c095780601f10612bde57610100808354040283529160200191612c09565b820191906000526020600020905b815481529060010190602001808311612bec57829003601f168201915b5050505050612c1a565b9050919050565b6000612c24612c84565b8290506000815114915050919050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a723058209d45b2a3939c251d464544c748382d14cf4ccc7e1e20ac508ae1ce551da794700029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("4", "0x7ba2a4671caefc25252d7cc11c33c79821c7739a");
    }

    protected TiesDB(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TiesDB(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> getFieldName(byte[] tsKey, byte[] tKey, byte[] fKey) {
        Function function = new Function("getFieldName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> deleteTablespace(byte[] tsKey) {
        Function function = new Function(
                "deleteTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteTrigger(byte[] tsKey, byte[] tKey, byte[] trKey) {
        Function function = new Function(
                "deleteTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getTableName(byte[] tsKey, byte[] tKey) {
        Function function = new Function("getTableName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<byte[]> tableToTablespace(byte[] tKey) {
        Function function = new Function("tableToTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Boolean> hasField(byte[] tsKey, byte[] tKey, byte[] fKey) {
        Function function = new Function("hasField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> hasTrigger(byte[] tsKey, byte[] tKey, byte[] trKey) {
        Function function = new Function("hasTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getTriggerName(byte[] tsKey, byte[] tKey, byte[] trKey) {
        Function function = new Function("getTriggerName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createTrigger(byte[] tsKey, byte[] tKey, String trName, byte[] payload) {
        Function function = new Function(
                "createTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.Utf8String(trName), 
                new org.web3j.abi.datatypes.DynamicBytes(payload)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queueNode(String _node) {
        Function function = new Function(
                "queueNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_node)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTablespace(String tsName, String rs) {
        Function function = new Function(
                "createTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tsName), 
                new org.web3j.abi.datatypes.Address(rs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unqueueNode(String _node) {
        Function function = new Function(
                "unqueueNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_node)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getTablespaceTablesKeys(byte[] tsKey) {
        Function function = new Function("getTablespaceTablesKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> createNode(String _node) {
        Function function = new Function(
                "createNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_node)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteField(byte[] tsKey, byte[] tKey, byte[] fKey) {
        Function function = new Function(
                "deleteField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getTableNodes(byte[] tKey) {
        Function function = new Function("getTableNodes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createField(byte[] tsKey, byte[] tKey, String fName, String fType, byte[] fDefault) {
        Function function = new Function(
                "createField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.Utf8String(fName), 
                new org.web3j.abi.datatypes.Utf8String(fType), 
                new org.web3j.abi.datatypes.DynamicBytes(fDefault)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasTablespace(byte[] tsKey) {
        Function function = new Function("hasTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setRegistry(String _registry) {
        Function function = new Function(
                "setRegistry", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_registry)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasTable(byte[] tsKey, byte[] tKey) {
        Function function = new Function("hasTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getTablespaceKeys() {
        Function function = new Function("getTablespaceKeys", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> createTable(byte[] tsKey, String tName) {
        Function function = new Function(
                "createTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.Utf8String(tName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getNodes() {
        Function function = new Function("getNodes", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> deleteTable(byte[] tsKey, byte[] tKey) {
        Function function = new Function(
                "deleteTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> distribute(byte[] tKey, BigInteger ranges, BigInteger replicas) {
        Function function = new Function(
                "distribute", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Uint32(ranges), 
                new org.web3j.abi.datatypes.generated.Uint32(replicas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getTableFieldsKeys(byte[] tsKey, byte[] tKey) {
        Function function = new Function("getTableFieldsKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<String> getTablespaceName(byte[] tsKey) {
        Function function = new Function("getTablespaceName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getNodeTableRanges(String node, byte[] tKey) {
        Function function = new Function("getNodeTableRanges", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(node), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint64>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public static RemoteCall<TiesDB> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TiesDB.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static TiesDB load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TiesDB(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static TiesDB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TiesDB(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
    
    @Override
    protected RemoteCall<TransactionReceipt> executeRemoteCallTransaction(Function function) {
        return executeRemoteCallTransaction(function, BigInteger.ZERO);
    }

    @Override
    protected RemoteCall<TransactionReceipt> executeRemoteCallTransaction(
            Function function, BigInteger weiValue) {
    	
    	final String data = FunctionEncoder.encode(function);
    	BigInteger encodedWei;
		try {
			encodedWei = ((SequentialFastRawTransactionManager)transactionManager).encodeNonceToValue(weiValue);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
    	
        return new RemoteCall<>(() -> send(contractAddress, data, encodedWei, gasPrice, gasLimit));
    }
    
    public static RemoteCall<TiesDB> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
    	BigInteger value;
    	try {
			value = ((SequentialFastRawTransactionManager)transactionManager).encodeNonceToValue(BigInteger.ZERO);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
        return deployRemoteCall(TiesDB.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", value);
    }

}
