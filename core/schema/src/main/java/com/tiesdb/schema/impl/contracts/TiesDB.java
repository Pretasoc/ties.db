package com.tiesdb.schema.impl.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class TiesDB extends Contract {
    private static final String BINARY = "0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613f6c806100536000396000f3006060604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630498a82c146101e857806306f0cfa6146103035780630be780231461032a57806317e473511461044357806321c307c31461048657806326bf3067146104ba5780633408f73a1461063f578063398fa5c8146106f15780633d4f20a91461072a5780634412331d14610793578063473e13ad146108405780635c6dc219146108795780636532ec7e146108b2578063787f8462146109295780637ec7ea8c14610a2b57806388d7282914610c7d5780638da5cb5b14610cf95780638f61245214610d4e5780639d20904814610dcd578063a0361ba714610e66578063a0478cb514610f13578063a0c8c9d914610f47578063a5163f7314610f93578063a91ee0dc14610fd2578063a92ddcf81461100b578063b02b3b1514611057578063b1fbadc1146110a3578063b42f076a1461110e578063cf1fefd714611142578063dabc2bd5146111ef578063df818c7b1461128f578063e24ec808146112ce578063e29581aa14611354578063ed90cb37146113be578063ee509cf5146113f2578063f274d82314611437578063f2fde38b146114d7578063f82df75b14611510578063f96d487b1461155c575b600080fd5b34156101f357600080fd5b61020d6004808035600019169060200190919050506115f7565b60405180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838103835286818151815260200191508051906020019080838360005b83811015610283578082015181840152602081019050610268565b50505050905090810190601f1680156102b05780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019060200280838360005b838110156102ec5780820151818401526020810190506102d1565b505050509050019550505050505060405180910390f35b341561030e57600080fd5b61032860048080356000191690602001909190505061163b565b005b341561033557600080fd5b61035c600480803560001916906020019091908035600019169060200190919050506116cf565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156103a0578082015181840152602081019050610385565b50505050905090810190601f1680156103cd5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156104065780820151818401526020810190506103eb565b50505050905090810190601f1680156104335780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561044e57600080fd5b610468600480803560001916906020019091905050611722565b60405180826000191660001916815260200191505060405180910390f35b341561049157600080fd5b6104b86004808035600019169060200190919080356000191690602001909190505061174a565b005b34156104c557600080fd5b6104ec600480803560001916906020019091908035600019169060200190919050506117f1565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610534578082015181840152602081019050610519565b50505050905090810190601f1680156105615780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561059a57808201518184015260208101905061057f565b50505050905090810190601f1680156105c75780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156106005780820151818401526020810190506105e5565b50505050905090810190601f16801561062d5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561064a57600080fd5b61065261184e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561069957808201518184015260208101905061067e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156106db5780820151818401526020810190506106c0565b5050505090500194505050505060405180910390f35b34156106fc57600080fd5b610728600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611870565b005b341561073557600080fd5b6107756004808035906020019082018035906020019190919290803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119b4565b60405180826000191660001916815260200191505060405180910390f35b341561079e57600080fd5b6107c560048080356000191690602001909190803560001916906020019091905050611aa6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108055780820151818401526020810190506107ea565b50505050905090810190601f1680156108325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561084b57600080fd5b610877600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611aee565b005b341561088457600080fd5b6108b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c43565b005b34156108bd57600080fd5b61090b600480803560001916906020019091908035906020019082018035906020019190919290803560ff169060200190919080359060200190820180359060200191909192905050611d57565b60405180826000191660001916815260200191505060405180910390f35b341561093457600080fd5b61095b60048080356000191690602001909190803560001916906020019091905050611e5d565b60405180806020018460ff1660ff16815260200180602001838103835286818151815260200191508051906020019080838360005b838110156109ab578082015181840152602081019050610990565b50505050905090810190601f1680156109d85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019060200280838360005b83811015610a145780820151818401526020810190506109f9565b505050509050019550505050505060405180910390f35b3415610a3657600080fd5b610a50600480803560001916906020019091905050611eb4565b6040518080602001806020018060200180602001806020018963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018060200187810387528f818151815260200191508051906020019080838360005b83811015610ac8578082015181840152602081019050610aad565b50505050905090810190601f168015610af55780820380516001836020036101000a031916815260200191505b5087810386528e818151815260200191508051906020019080838360005b83811015610b2e578082015181840152602081019050610b13565b50505050905090810190601f168015610b5b5780820380516001836020036101000a031916815260200191505b5087810385528d818151815260200191508051906020019060200280838360005b83811015610b97578082015181840152602081019050610b7c565b5050505090500187810384528c818151815260200191508051906020019060200280838360005b83811015610bd9578082015181840152602081019050610bbe565b5050505090500187810383528b818151815260200191508051906020019060200280838360005b83811015610c1b578082015181840152602081019050610c00565b50505050905001878103825288818151815260200191508051906020019060200280838360005b83811015610c5d578082015181840152602081019050610c42565b505050509050019e50505050505050505050505050505060405180910390f35b3415610c8857600080fd5b610ca2600480803560001916906020019091905050611f1e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ce5578082015181840152602081019050610cca565b505050509050019250505060405180910390f35b3415610d0457600080fd5b610d0c611fc9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d5957600080fd5b610daf600480803560001916906020019091908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190820180359060200191909192905050611fee565b60405180826000191660001916815260200191505060405180910390f35b3415610dd857600080fd5b610e04600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612106565b604051808315151515815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610e51578082015181840152602081019050610e36565b50505050905001935050505060405180910390f35b3415610e7157600080fd5b610e9860048080356000191690602001909190803560001916906020019091905050612163565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ed8578082015181840152602081019050610ebd565b50505050905090810190601f168015610f055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610f1e57600080fd5b610f45600480803560001916906020019091908035600019169060200190919050506121ab565b005b3415610f5257600080fd5b610f7960048080356000191690602001909190803560001916906020019091905050612252565b604051808215151515815260200191505060405180910390f35b3415610f9e57600080fd5b610fb8600480803560001916906020019091905050612282565b604051808215151515815260200191505060405180910390f35b3415610fdd57600080fd5b611009600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061232c565b005b341561101657600080fd5b61103d600480803560001916906020019091908035600019169060200190919050506123cb565b604051808215151515815260200191505060405180910390f35b341561106257600080fd5b61108960048080356000191690602001909190803560001916906020019091905050612404565b604051808215151515815260200191505060405180910390f35b34156110ae57600080fd5b6110f0600480803560001916906020019091908035906020019082018035906020019190919290803590602001908201803590602001919091929050506124c1565b60405180826000191660001916815260200191505060405180910390f35b341561111957600080fd5b611140600480803560001916906020019091908035600019169060200190919050506125b5565b005b341561114d57600080fd5b6111746004808035600019169060200190919080356000191690602001909190505061265c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156111b4578082015181840152602081019050611199565b50505050905090810190601f1680156111e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156111fa57600080fd5b6112146004808035600019169060200190919050506126a4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611254578082015181840152602081019050611239565b50505050905090810190601f1680156112815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561129a57600080fd5b6112b46004808035600019169060200190919050506126cf565b604051808215151515815260200191505060405180910390f35b34156112d957600080fd5b61133660048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612701565b60405180826000191660001916815260200191505060405180910390f35b341561135f57600080fd5b61136761284d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156113aa57808201518184015260208101905061138f565b505050509050019250505060405180910390f35b34156113c957600080fd5b6113f0600480803560001916906020019091908035600019169060200190919050506128e4565b005b34156113fd57600080fd5b61143560048080356000191690602001909190803563ffffffff1690602001909190803563ffffffff169060200190919050506129b6565b005b341561144257600080fd5b61145c600480803560001916906020019091905050612b2a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561149c578082015181840152602081019050611481565b50505050905090810190601f1680156114c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156114e257600080fd5b61150e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612b5e565b005b341561151b57600080fd5b61154260048080356000191690602001909190803560001916906020019091905050612cb3565b604051808215151515815260200191505060405180910390f35b341561156757600080fd5b6115a0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560001916906020019091905050612d70565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156115e35780820151818401526020810190506115c8565b505050509050019250505060405180910390f35b6115ff613edc565b6000611609613ef0565b61162e6001800160008660001916600019168152602001908152602001600020612dda565b9250925092509193909250565b60017385f37e67b9e5c1266011c616c7bf62957339718c63568c028e9091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b15156116b857600080fd5b6102c65a03f415156116c957600080fd5b50505050565b6116d7613edc565b6116df613f04565b6117176116f6856001612f1290919063ffffffff16565b600a0160008560001916600019168152602001908152602001600020612f97565b915091509250929050565b6000600160020160008360001916600019168152602001908152602001600020549050919050565b61175e826001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f52963d05b32b39091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b15156117d957600080fd5b6102c65a03f415156117ea57600080fd5b5050505050565b6117f9613edc565b611801613edc565b611809613f04565b611841611820866001612f1290919063ffffffff16565b600801600086600019166000191681526020019081526020016000206130ea565b9250925092509250925092565b611856613ef0565b61185e613f18565b61186860016132e6565b915091509091565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ce57600080fd5b600160040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061191b816133df565b15151561192757600080fd5b8073a7647be6a9d75c94c203c270910c45fb3496c8ea63ed16c83e909160016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b151561199c57600080fd5b6102c65a03f415156119ad57600080fd5b5050505050565b600060017385f37e67b9e5c1266011c616c7bf62957339718c63d0d7955690918686866000604051602001526040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285858281815260200192508082843782019150509550505050505060206040518083038186803b1515611a8257600080fd5b6102c65a03f41515611a9357600080fd5b5050506040518051905090509392505050565b611aae613edc565b611ae6611ac5846001612f1290919063ffffffff16565b6008016000846000191660001916815260200190815260200160002061341d565b905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4c57600080fd5b600160040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611b99816133df565b151515611ba557600080fd5b8073a7647be6a9d75c94c203c270910c45fb3496c8ea63e1df99e0909160016000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b1515611c2357600080fd5b6102c65a03f41515611c3457600080fd5b50505060405180519050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c9f57600080fd5b60017385f37e67b9e5c1266011c616c7bf62957339718c633514a1729091836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1515611d4057600080fd5b6102c65a03f41515611d5157600080fd5b50505050565b6000611d6d876001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f52963e7c56f45909188888888886000604051602001526040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180878152602001806020018560ff1660ff1681526020018060200183810383528888828181526020019250808284378201915050838103825285858281815260200192506020028082843782019150509850505050505050505060206040518083038186803b1515611e3657600080fd5b6102c65a03f41515611e4757600080fd5b5050506040518051905090509695505050505050565b611e65613edc565b6000611e6f613ef0565b611ea7611e86866001612f1290919063ffffffff16565b600c01600086600019166000191681526020019081526020016000206134de565b9250925092509250925092565b611ebc613edc565b611ec4613edc565b611ecc613ef0565b611ed4613ef0565b611edc613ef0565b600080611ee7613f18565b611f03611efe8a6001612f1290919063ffffffff16565b613603565b97509750975097509750975097509750919395975091939597565b611f26613f18565b611f3a826001612f1290919063ffffffff16565b600e01805480602002602001604051908101604052809291908181526020018280548015611fbd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f73575b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612004886001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f52963bdbad5ee90918989898989896000604051602001526040518863ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018088815260200180602001806020018060200184810384528a8a82818152602001925080828437820191505084810383528888828181526020019250808284378201915050848103825286868281815260200192508082843782019150509a505050505050505050505060206040518083038186803b15156120de57600080fd5b6102c65a03f415156120ef57600080fd5b505050604051805190509050979650505050505050565b6000612110613ef0565b61215a600160040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613946565b91509150915091565b61216b613edc565b6121a3612182846001612f1290919063ffffffff16565b600a01600084600019166000191681526020019081526020016000206139c8565b905092915050565b6121bf826001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f529630b3bf41f9091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b151561223a57600080fd5b6102c65a03f4151561224b57600080fd5b5050505050565b600061227a8261226c856001612f1290919063ffffffff16565b613a8990919063ffffffff16565b905092915050565b600060017385f37e67b9e5c1266011c616c7bf62957339718c6399dd19d69091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b151561230a57600080fd5b6102c65a03f4151561231b57600080fd5b505050604051805190509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238757600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006123fc826001800160008660001916600019168152602001908152602001600020613ab990919063ffffffff16565b905092915050565b600061241a836001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f5296317d77ab79091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b151561249e57600080fd5b6102c65a03f415156124af57600080fd5b50505060405180519050905092915050565b60006124d7866001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f529630a75301d9091878787876000604051602001526040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018060200180602001838103835287878281815260200192508082843782019150508381038252858582818152602001925080828437820191505097505050505050505060206040518083038186803b151561258f57600080fd5b6102c65a03f415156125a057600080fd5b50505060405180519050905095945050505050565b6125c9826001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f5296388fb34d59091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b151561264457600080fd5b6102c65a03f4151561265557600080fd5b5050505050565b612664613edc565b61269c61267b846001612f1290919063ffffffff16565b600c0160008460001916600019168152602001908152602001600020613ae9565b905092915050565b6126ac613edc565b6126c86126c3836001612f1290919063ffffffff16565b613baa565b9050919050565b600080600102600160020160008460001916600019168152602001908152602001600020546000191614159050919050565b6000806001800160008560001916600019168152602001908152602001600020736976d33c31cf6f5cba7f8c2f870ba4c01ba80c446341a080749091856000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127b857808201518184015260208101905061279d565b50505050905090810190601f1680156127e55780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b151561280257600080fd5b6102c65a03f4151561281357600080fd5b5050506040518051905090508360016002016000836000191660001916815260200190815260200160002081600019169055505092915050565b612855613f18565b60016003018054806020026020016040519081016040528092919081815260200182805480156128da57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612890575b5050505050905090565b6001800160008360001916600019168152602001908152602001600020736976d33c31cf6f5cba7f8c2f870ba4c01ba80c44638042a8509091836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060006040518083038186803b151561297c57600080fd5b6102c65a03f4151561298d57600080fd5b505050600160020160008260001916600019168152602001908152602001600020600090555050565b60006129cc846001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f529636548749190916000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1515612a4057600080fd5b6102c65a03f41515612a5157600080fd5b505050604051805190506001900414151515612a6c57600080fd5b60017385f37e67b9e5c1266011c616c7bf62957339718c63c193f7df90918585856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184600019166000191681526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff16815260200194505050505060006040518083038186803b1515612b1157600080fd5b6102c65a03f41515612b2257600080fd5b505050505050565b612b32613edc565b612b576001800160008460001916600019168152602001908152602001600020613c6b565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bb957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bf557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000612cc9836001612f1290919063ffffffff16565b73f3567780b222fe68493da8451f41bed0ffc1f52963eebfbc859091846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600019166000191681526020019250505060206040518083038186803b1515612d4d57600080fd5b6102c65a03f41515612d5e57600080fd5b50505060405180519050905092915050565b612d78613f2c565b6000600160040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612dd18382613d2c90919063ffffffff16565b91505092915050565b612de2613edc565b6000612dec613ef0565b836002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e845780601f10612e5957610100808354040283529160200191612e84565b820191906000526020600020905b815481529060010190602001808311612e6757829003601f168201915b505050505092508360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915083600301805480602002602001604051908101604052809291908181526020018280548015612f0457602002820191906000526020600020905b81546000191681526020019060010190808311612eec575b505050505090509193909250565b60008060008085600201600086600019166000191681526020019081526020016000205492508560010160008460001916600019168152602001908152602001600020915081600401600086600019166000191681526020019081526020016000209050612f7f81613d67565b151515612f8b57600080fd5b80935050505092915050565b612f9f613edc565b612fa7613f04565b826010018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561303f5780601f106130145761010080835404028352916020019161303f565b820191906000526020600020905b81548152906001019060200180831161302257829003601f168201915b50505050509150826011018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130de5780601f106130b3576101008083540402835291602001916130de565b820191906000526020600020905b8154815290600101906020018083116130c157829003601f168201915b50505050509050915091565b6130f2613edc565b6130fa613edc565b613102613f04565b836010018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561319a5780601f1061316f5761010080835404028352916020019161319a565b820191906000526020600020905b81548152906001019060200180831161317d57829003601f168201915b50505050509250836011018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132395780601f1061320e57610100808354040283529160200191613239565b820191906000526020600020905b81548152906001019060200180831161321c57829003601f168201915b50505050509150836012018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132d85780601f106132ad576101008083540402835291602001916132d8565b820191906000526020600020905b8154815290600101906020018083116132bb57829003601f168201915b505050505090509193909250565b6132ee613ef0565b6132f6613f18565b8260000180548060200260200160405190810160405280929190818152602001828054801561334857602002820191906000526020600020905b81546000191681526020019060010190808311613330575b50505050509150826003018054806020026020016040519081016040528092919081815260200182805480156133d357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613389575b50505050509050915091565b6000808260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16149050919050565b613425613edc565b61342e82613d77565b15151561343a57600080fd5b816010018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134d25780601f106134a7576101008083540402835291602001916134d2565b820191906000526020600020905b8154815290600101906020018083116134b557829003601f168201915b50505050509050919050565b6134e6613edc565b60006134f0613ef0565b8360000160109054906101000a900460ff169150836001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561359c5780601f106135715761010080835404028352916020019161359c565b820191906000526020600020905b81548152906001019060200180831161357f57829003601f168201915b50505050509250836002018054806020026020016040519081016040528092919081815260200182805480156135f557602002820191906000526020600020905b815460001916815260200190600101908083116135dd575b505050505090509193909250565b61360b613edc565b613613613edc565b61361b613ef0565b613623613ef0565b61362b613ef0565b600080613636613f18565b886006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136ce5780601f106136a3576101008083540402835291602001916136ce565b820191906000526020600020905b8154815290600101906020018083116136b157829003601f168201915b50505050509750886001016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137705780601f1061374557610100808354040283529160200191613770565b820191906000526020600020905b81548152906001019060200180831161375357829003601f168201915b50505050509650886007018054806020026020016040519081016040528092919081815260200182805480156137c957602002820191906000526020600020905b815460001916815260200190600101908083116137b1575b505050505095508860090180548060200260200160405190810160405280929190818152602001828054801561382257602002820191906000526020600020905b8154600019168152602001906001019080831161380a575b5050505050945088600b0180548060200260200160405190810160405280929190818152602001828054801561387b57602002820191906000526020600020905b81546000191681526020019060010190808311613863575b5050505050935088600d0160009054906101000a900463ffffffff16925088600d0160049054906101000a900463ffffffff16915088600e0180548060200260200160405190810160405280929190818152602001828054801561393457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116138ea575b50505050509050919395975091939597565b6000613950613ef0565b60008360000160109054906101000a9004600f0b600f0b139150826002018054806020026020016040519081016040528092919081815260200182805480156139bc57602002820191906000526020600020905b815460001916815260200190600101908083116139a4575b50505050509050915091565b6139d0613edc565b6139d982613d87565b1515156139e557600080fd5b816010018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a7d5780601f10613a5257610100808354040283529160200191613a7d565b820191906000526020600020905b815481529060010190602001808311613a6057829003601f168201915b50505050509050919050565b6000613ab083600c0160008460001916600019168152602001908152602001600020613d97565b15905092915050565b6000613ae08360040160008460001916600019168152602001908152602001600020613d67565b15905092915050565b613af1613edc565b613afa82613d97565b151515613b0657600080fd5b816001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b9e5780601f10613b7357610100808354040283529160200191613b9e565b820191906000526020600020905b815481529060010190602001808311613b8157829003601f168201915b50505050509050919050565b613bb2613edc565b613bbb82613d67565b151515613bc757600080fd5b816006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c5f5780601f10613c3457610100808354040283529160200191613c5f565b820191906000526020600020905b815481529060010190602001808311613c4257829003601f168201915b50505050509050919050565b613c73613edc565b613c7c82613dd5565b151515613c8857600080fd5b816002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d205780601f10613cf557610100808354040283529160200191613d20565b820191906000526020600020905b815481529060010190602001808311613d0357829003601f168201915b50505050509050919050565b613d34613f2c565b600083600101600084600019166000191681526020019081526020016000209050613d5e81613de5565b91505092915050565b6000808260000154149050919050565b6000808260000154149050919050565b6000808260000154149050919050565b6000808260000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16149050919050565b6000808260000154149050919050565b613ded613f2c565b613df5613f2c565b6000808460010180549050604051805910613e0d5750595b90808252806020026020018201604052509250600091505b8251821015613ed1578460010182815481101515613e3f57fe5b906000526020600020900190508060000160049054906101000a900463ffffffff1663ffffffff1660208260000160009054906101000a900463ffffffff1663ffffffff1667ffffffffffffffff169060020a02178383815181101515613ea257fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff1681525050816001019150613e25565b829350505050919050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a7230582097b56cd2b616e08c2d12faee43242643bc8fe96e69c179cc841ded77b11b78d50029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("4", "0x0feda88f61422192fe6e0e83fabdfc1ec5a86196");
    }

    protected TiesDB(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TiesDB(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = transactionReceipt.getLogs().get(valueList.indexOf(eventValues));
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Tuple3<String, String, List<byte[]>>> getTablespace(byte[] tsKey) {
        final Function function = new Function("getTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple3<String, String, List<byte[]>>>(
                new Callable<Tuple3<String, String, List<byte[]>>>() {
                    @Override
                    public Tuple3<String, String, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, List<byte[]>>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                convertToNative((List<Bytes32>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteTablespace(byte[] tsKey) {
        Function function = new Function(
                "deleteTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, byte[]>> getTrigger(byte[] tKey, byte[] trKey) {
        final Function function = new Function("getTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple2<String, byte[]>>(
                new Callable<Tuple2<String, byte[]>>() {
                    @Override
                    public Tuple2<String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<byte[]> tableToTablespace(byte[] tKey) {
        Function function = new Function("tableToTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> deleteIndex(byte[] tKey, byte[] iKey) {
        Function function = new Function(
                "deleteIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(iKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, byte[]>> getField(byte[] tKey, byte[] fKey) {
        final Function function = new Function("getField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<String, String, byte[]>>(
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<List<byte[]>, List<String>>> getStorage() {
        final Function function = new Function("getStorage", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple2<List<byte[]>, List<String>>>(
                new Callable<Tuple2<List<byte[]>, List<String>>>() {
                    @Override
                    public Tuple2<List<byte[]>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<byte[]>, List<String>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Address>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> queueNode(String _node) {
        Function function = new Function(
                "queueNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_node)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTablespace(String tsName, String rs) {
        Function function = new Function(
                "createTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tsName), 
                new org.web3j.abi.datatypes.Address(rs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getFieldName(byte[] tKey, byte[] fKey) {
        Function function = new Function("getFieldName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> unqueueNode(String _node) {
        Function function = new Function(
                "unqueueNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_node)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createNode(String _node) {
        Function function = new Function(
                "createNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_node)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createIndex(byte[] tKey, String iName, BigInteger iType, List<byte[]> fields) {
        Function function = new Function(
                "createIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.Utf8String(iName), 
                new org.web3j.abi.datatypes.generated.Uint8(iType), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(fields, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, BigInteger, List<byte[]>>> getIndex(byte[] tKey, byte[] iKey) {
        final Function function = new Function("getIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(iKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, List<byte[]>>>(
                new Callable<Tuple3<String, BigInteger, List<byte[]>>>() {
                    @Override
                    public Tuple3<String, BigInteger, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, List<byte[]>>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                convertToNative((List<Bytes32>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple8<String, String, List<byte[]>, List<byte[]>, List<byte[]>, BigInteger, BigInteger, List<String>>> getTable(byte[] tKey) {
        final Function function = new Function("getTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple8<String, String, List<byte[]>, List<byte[]>, List<byte[]>, BigInteger, BigInteger, List<String>>>(
                new Callable<Tuple8<String, String, List<byte[]>, List<byte[]>, List<byte[]>, BigInteger, BigInteger, List<String>>>() {
                    @Override
                    public Tuple8<String, String, List<byte[]>, List<byte[]>, List<byte[]>, BigInteger, BigInteger, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, List<byte[]>, List<byte[]>, List<byte[]>, BigInteger, BigInteger, List<String>>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                convertToNative((List<Bytes32>) results.get(2).getValue()), 
                                convertToNative((List<Bytes32>) results.get(3).getValue()), 
                                convertToNative((List<Bytes32>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                convertToNative((List<Address>) results.get(7).getValue()));
                    }
                });
    }

    public RemoteCall<List> getTableNodes(byte[] tKey) {
        Function function = new Function("getTableNodes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createField(byte[] tKey, String fName, String fType, byte[] fDefault) {
        Function function = new Function(
                "createField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.Utf8String(fName), 
                new org.web3j.abi.datatypes.Utf8String(fType), 
                new org.web3j.abi.datatypes.DynamicBytes(fDefault)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<Boolean, List<byte[]>>> getNode(String node) {
        final Function function = new Function("getNode", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(node)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple2<Boolean, List<byte[]>>>(
                new Callable<Tuple2<Boolean, List<byte[]>>>() {
                    @Override
                    public Tuple2<Boolean, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, List<byte[]>>(
                                (Boolean) results.get(0).getValue(), 
                                convertToNative((List<Bytes32>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<String> getTriggerName(byte[] tKey, byte[] trKey) {
        Function function = new Function("getTriggerName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> deleteTrigger(byte[] tKey, byte[] trKey) {
        Function function = new Function(
                "deleteTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasIndex(byte[] tKey, byte[] iKey) {
        Function function = new Function("hasIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(iKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> hasTablespace(byte[] tsKey) {
        Function function = new Function("hasTablespace", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setRegistry(String _registry) {
        Function function = new Function(
                "setRegistry", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_registry)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasTable(byte[] tsKey, byte[] tKey) {
        Function function = new Function("hasTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> hasTrigger(byte[] tKey, byte[] trKey) {
        Function function = new Function("hasTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(trKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> createTrigger(byte[] tKey, String trName, byte[] payload) {
        Function function = new Function(
                "createTrigger", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.Utf8String(trName), 
                new org.web3j.abi.datatypes.DynamicBytes(payload)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteField(byte[] tKey, byte[] fKey) {
        Function function = new Function(
                "deleteField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getIndexName(byte[] tKey, byte[] iKey) {
        Function function = new Function("getIndexName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(iKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getTableName(byte[] tKey) {
        Function function = new Function("getTableName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> hasTable(byte[] tKey) {
        Function function = new Function("hasTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> createTable(byte[] tsKey, String tName) {
        Function function = new Function(
                "createTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.Utf8String(tName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getNodes() {
        Function function = new Function("getNodes", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteTable(byte[] tsKey, byte[] tKey) {
        Function function = new Function(
                "deleteTable", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> distribute(byte[] tKey, BigInteger ranges, BigInteger replicas) {
        Function function = new Function(
                "distribute", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Uint32(ranges), 
                new org.web3j.abi.datatypes.generated.Uint32(replicas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getTablespaceName(byte[] tsKey) {
        Function function = new Function("getTablespaceName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tsKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasField(byte[] tKey, byte[] fKey) {
        Function function = new Function("hasField", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(tKey), 
                new org.web3j.abi.datatypes.generated.Bytes32(fKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getNodeTableRanges(String node, byte[] tKey) {
        Function function = new Function("getNodeTableRanges", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(node), 
                new org.web3j.abi.datatypes.generated.Bytes32(tKey)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public static RemoteCall<TiesDB> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TiesDB.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TiesDB> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
    	BigInteger value;
    	try {
			value = ((com.tiesdb.web3j.SequentialFastRawTransactionManager)transactionManager).encodeNonceToValue(BigInteger.ZERO);
		} catch (java.io.IOException e) {
			throw new RuntimeException(e);
		}
		if(BINARY.indexOf('_') >= 0)
			throw new RuntimeException("Contract binary contains unresolved libraries!");

        return deployRemoteCall(TiesDB.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", value);
    }

    public static TiesDB load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TiesDB(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static TiesDB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TiesDB(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected static <OriginalType extends Type, NewType> List<NewType> convertToNative(List<OriginalType> arr) {
        return (List<NewType>) arr.stream().map(v -> v.getValue()).collect(Collectors.toList());
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    @Override
    protected RemoteCall<TransactionReceipt> executeRemoteCallTransaction(Function function) {
        return executeRemoteCallTransaction(function, BigInteger.ZERO);
    }

    @Override
    protected RemoteCall<TransactionReceipt> executeRemoteCallTransaction(
            Function function, BigInteger weiValue) {
    	
    	final String data = org.web3j.abi.FunctionEncoder.encode(function);
    	BigInteger encodedWei;
		try {
			encodedWei = ((com.tiesdb.web3j.SequentialFastRawTransactionManager)transactionManager).encodeNonceToValue(weiValue);
		} catch (java.io.IOException e) {
			throw new RuntimeException(e);
		}
    	
        return new RemoteCall<>(() -> send(contractAddress, data, encodedWei, gasPrice, gasLimit));
    }

}